<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" borderStyle="inset" xmlns:local="*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

	<mx:HBox styleName="internalPadding">
		<mx:Label text="Allowed Values" width="{Globals.labelColumnWidth( 3 )}"/>
		<mx:VBox verticalGap="0"> 
			<mx:List id="_valuesList" 
					 width="{Globals.propertyColumnWidth( 3 )}" 
					 editable="true"
					 editorHeightOffset="4"
					 change="{ onValueSelected(); }"
					 itemEditBeginning="{ onBeginningValueEdit( event ) }"
					 itemEditEnd="{ onEndValueEdit( event ) }"
					 rowCount="{ Math.max( 2, _valuesList.dataProvider.length ) }" 
					 verticalAlign="middle"/>
			<mx:HBox>
				<mx:Button id="_addValue" label="add" width="{Globals.propertyColumnWidth( 3 ) / 2 - 4}" click="{ onClickAddValue() }"/>
				<mx:Button id="_removeValue" label="remove" width="{Globals.propertyColumnWidth( 3 ) / 2 - 4}" click="{ onClickRemoveValue() }"/>
			</mx:HBox>
		</mx:VBox>
	</mx:HBox>		
	
	<fx:Script>
		<![CDATA[	
			
			import mx.collections.IList;
			import mx.controls.TextInput;
			import mx.events.ListEvent;
			
			import flexunit.framework.Assert;
			

			public function doInitialize():void
			{
				_newValueIndex = 1;
				
				_valuesList.dataProvider = [];
				updateRemoveValueEnable();
			}
			

			public function set stateType( type:String ):void
			{
				_stateType = type;
				sortContent();
			}
			
		
			public function validateContent():Boolean
			{
				var values:IList = _valuesList.dataProvider as IList;
				Assert.assertNotNull( values );

				if( values.length == 0 )
				{
					_valuesList.errorString = "You must provide at least one allowed value";
					return false;
				}
				
				var valueMap:Object = new Object;
					
				for( var i:int = 0; i < values.length; i++ )
				{
					var value:String = values.getItemAt( i ).toString();
					
					if( !Globals.doTypesMatch( value, _stateType ) )
					{
						_valuesList.errorString = "Allowed Value '" + value + "' is not of type '" + _stateType + "'";
						return false;
					}
					
					if( _stateType != Globals.stringType )
					{
						//convert to number and back to string, so that 0 == 0.000 (for example)
						value = Number( value ).toString();
					}
					
					if( valueMap.hasOwnProperty( value ) )
					{
						_valuesList.errorString = "Allowed Value list must not contain duplicates.  Found duplicate: '" + value + "'";
						return false;
					}
					
					valueMap[ value ] = value;
				}
				
				_valuesList.errorString = null;
				return true;
			}
			
			
			public function loadFromXML( xml:XMLList ):Boolean
			{
				var values:Array = new Array;
				
				for each( var valueXML:XML in xml.State )
				{
					values.push( valueXML.toString() );
				}
				
				_valuesList.dataProvider = values;
				
				updateRemoveValueEnable();				
				
				return true;
			}
			
			
			public function saveToXML():XML
			{
				var xml:XML = new XML( "<AllowedStates></AllowedStates>" );

				var values:IList = _valuesList.dataProvider as IList;
				Assert.assertNotNull( values );
				
				for( var i:int = 0; i < values.length; i++ )
				{
					xml.appendChild( <State> { values.getItemAt( i ).toString() } </State> );
				}
			
				return xml;
			}
			
			
			public function get minimum():Number
			{
				var minimum:Number = 0;
				var first:Boolean = true;
				
				var values:IList = _valuesList.dataProvider as IList;
				Assert.assertNotNull( values );

				for( var i:int = 0; i < values.length; i++ )
				{
					var value:Number = Number( values.getItemAt( i ).toString() );
					if( isNaN( value ) ) continue;
					
					if( first || value < minimum )
					{
						minimum = value;
						first = false;
					}
				}
				
				return minimum;
			}

			
			public function get maximum():Number
			{
				var maximum:Number = 0;
				var first:Boolean = true;
				
				var values:IList = _valuesList.dataProvider as IList;
				Assert.assertNotNull( values );
				
				for( var i:int = 0; i < values.length; i++ )
				{
					var value:Number = Number( values.getItemAt( i ).toString() );
					if( isNaN( value ) ) continue;
					
					if( first || value > maximum )
					{
						maximum = value;
						first = false;
					}
				}
				
				return maximum;
			}

			
			public function isValueValid( value:String ):Boolean
			{
				var values:IList = _valuesList.dataProvider as IList;
				Assert.assertNotNull( values );

				for( var i:int = 0; i < values.length; i++ )
				{
					if( _stateType == Globals.stringType )
					{
						if( value == values.getItemAt( i ).toString() )
						{
							return true;
						}
					}
					else
					{
						var number:Number = Number( value );
						Assert.assertFalse( isNaN( number ) );	//shouldn't get this var if value isn't a number!
						
						if( number == Number( values.getItemAt( i ).toString() ) )
						{
							return true;
						}
					}
				}
				
				return false;
			}
			
			
			private function onClickAddValue():void
			{
				var values:IList = _valuesList.dataProvider as IList;
				Assert.assertNotNull( values );
				
				values.addItem( "<value #" + _newValueIndex + ">" );
				_newValueIndex ++;
				
				_valuesList.selectedIndex = values.length - 1;
				updateRemoveValueEnable();
				interfaceChanged();
			}

			
			private function onClickRemoveValue():void
			{
				var values:IList = _valuesList.dataProvider as IList;
				Assert.assertNotNull( values );
				
				values.removeItemAt( _valuesList.selectedIndex );
				updateRemoveValueEnable();
				interfaceChanged();				
			}
			
			
			private function onValueSelected():void
			{
				_valueSelected = true;
				callLater( function():void { _valueSelected = false; } );
				
				updateRemoveValueEnable(); 
			}
			
			
			private function onBeginningValueEdit( event:ListEvent ):void
			{
				if( _valueSelected )
				{
					event.preventDefault();
				}
			}
			
			
			private function onEndValueEdit( event:ListEvent ):void
			{
				var values:IList = _valuesList.dataProvider as IList;
				Assert.assertNotNull( values );
				
				Assert.assertTrue( _valuesList.selectedIndex >= 0 && _valuesList.selectedIndex < values.length );
				
				values.setItemAt( ( _valuesList.itemEditorInstance as TextInput ).text, _valuesList.selectedIndex );
				
				event.preventDefault();
				_valuesList.destroyItemEditor();

				interfaceChanged();
				
				sortContent();
			}
			
			
			private function sortContent():void
			{
				var values:IList = _valuesList.dataProvider as IList;
				Assert.assertNotNull( values );
				
				var valueArray:Array = values.toArray();
				
				if( _stateType == Globals.stringType )
				{
					valueArray.sort();
				}
				else
				{
					valueArray.sort( compareAsNumbers );
				}
				
				_valuesList.dataProvider = valueArray;
				_valuesList.selectedItem = null;
				
				updateRemoveValueEnable();
			}
			
			
			private function compareAsNumbers( value1:Object, value2:Object ):int
			{
				var number1:Number = Number( value1 );
				var number2:Number = Number( value2 );
				
				if( isNaN( number1 ) ) 
				{
					if( isNaN( number2 ) )
					{
						return ( value1.toString() < value2.toString() ) ? -1 : 1;
					}
					else
					{
						return 1;
					}
				}
				else
				{
					if( isNaN( number2 ) ) 
					{
						return -1;
					}
					else
					{
						if( number1 < number2 ) return -1;
						if( number2 < number1 ) return 1;
					}
				}
				
				return 0;
			}
			
			
			private function updateRemoveValueEnable():void
			{
				_removeValue.enabled = ( _valuesList.selectedIndex >= 0 );
			}			

			
			private function interfaceChanged():void
			{
				dispatchEvent( new Event( Globals.modifiedEvent ) );
				validateContent();
			}			
			
			
			private var _stateType:String;
			
			private var _newValueIndex:int = 1;
			private var _valueSelected:Boolean = false;
			
		]]>
	</fx:Script>		
			
</mx:Canvas>
