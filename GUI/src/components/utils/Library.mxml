<?xml version="1.0" encoding="utf-8"?>
<!--
* Integra Live graphical user interface
*
* Copyright (C) 2009 Birmingham City University
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA   02110-1301,
* USA.
-->
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 verticalScrollPolicy="auto"
		 initialize="{onInitialize()}"
		 mouseDown="{onMouseDown( event )}"
		 keyDown="{onKeyDown( event )}"
		 paddingLeft="3"
		 paddingRight="3"
		 verticalGap="3">
	<fx:Declarations>
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			
			import flexunit.framework.Assert;
	
			override public function set data( value:Object ):void
			{
				super.data = value;
				
				visible = false;
				
				removeAllChildren();
				
				_selectedIndex = -1;

				var data:Array = value as Array;
				if( data )
				{
					for each( var listEntry:Object in data )
					{
						var libraryItem:LibraryItem = new LibraryItem;
						libraryItem.percentWidth = 100;
						libraryItem.data = listEntry;
						
						addChild( libraryItem );
					}
				}
				
				visible = true;
			}
			
			public function getLibraryItemAt( index:int ):LibraryItem
			{
				Assert.assertTrue( index >= 0 && index < numChildren );
				
				var item:LibraryItem = getChildAt( index ) as LibraryItem;
				
				Assert.assertNotNull( item );
				
				return item; 
			}
			
			
			private function onInitialize():void
			{
				addEventListener( FocusEvent.FOCUS_OUT, onFocusOut );
			}
			
			
			private function onMouseDown( event:MouseEvent ):void
			{
				setFocus();
				
				var clickItem:LibraryItem = Utilities.getAncestorByType( event.target, LibraryItem ) as LibraryItem;
				if( !clickItem ) return;
				
				var clickIndex:int = getChildIndex( clickItem );
				Assert.assertTrue( clickIndex >= 0 && clickIndex < numChildren );

				select( clickIndex );
			}
			
			
			private function onKeyDown( event:KeyboardEvent ):void
			{
				if( _selectedIndex < 0 ) return;
				
				Assert.assertTrue( numChildren > 0 );
				
				switch( event.keyCode )
				{
					case Keyboard.UP:
						if( _selectedIndex > 0 ) 
						{
							select( _selectedIndex - 1 );
						}
						else
						{
							select( numChildren - 1 );
						}
						break;
					
					case Keyboard.DOWN:
						if( _selectedIndex < numChildren - 1) 
						{
							select( _selectedIndex + 1 );
						}
						else
						{
							select( 0 );
						}
						break;
					
					case Keyboard.HOME:
						select( 0 );
						break;
					
					case Keyboard.END:
						select( numChildren - 1 );
						break;
					
					case Keyboard.ENTER:
						instantiateSelection();
						break;
					
				}
			}
			
			
			private function onFocusOut( event:FocusEvent ):void
			{
				select( -1 );
			}
			
			
			private function select( index:int ):void
			{
				if( index == _selectedIndex ) 
				{
					return;
				}
				
				if( _selectedIndex >= 0 )
				{
					getLibraryItemAt( _selectedIndex ).selected = false;
				}
					
				_selectedIndex = index;
				
				if( _selectedIndex >= 0 )
				{
					getLibraryItemAt( _selectedIndex ).selected = true;
				}
			}
			
			
			private function instantiateSelection():void
			{
				Alert.show( "todo - instantiate" );				
			}
			
			
			private var _selectedIndex:int = -1;
			
			
		]]>
	</fx:Script>


</mx:VBox>
