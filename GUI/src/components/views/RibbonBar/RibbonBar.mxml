<?xml version="1.0" encoding="utf-8"?>
<!--
 * Integra Live graphical user interface
 *
 * Copyright (C) 2009 Birmingham City University
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA   02110-1301,
 * USA.
 -->

<IntegraView xmlns="components.views.*" 
			 xmlns:fx="http://ns.adobe.com/mxml/2009" 
			 xmlns:s="library://ns.adobe.com/flex/spark" 
			 xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:RibbonBar="components.views.RibbonBar.*" 
				width="100%"  
				creationComplete="onCreationComplete()">

	<fx:Script>
		<![CDATA[
			import mx.core.ScrollPolicy;
			
			import components.controller.serverCommands.ReceiveMidiInput;
			import components.controller.serverCommands.SetPlaying;
			import components.controller.userDataCommands.SetColorScheme;
			import components.controller.userDataCommands.SetViewMode;
			import components.model.Info;
			import components.model.userData.ColorScheme;
			import components.model.userData.ViewMode;
			import components.utils.FontSize;
			import components.utils.Utilities;
			import components.views.InfoView.InfoMarkupForViews;
			
			import flexunit.framework.Assert;
		

		override public function styleChanged( style:String ):void
		{
			if( !style || style == ColorScheme.STYLENAME )
			{
				switch( getStyle( ColorScheme.STYLENAME ) )
				{
					case ColorScheme.LIGHT:
						opaqueBackground = 0xf5f5f5;
						_lightButton.selected = true;
						break;
						
					case ColorScheme.DARK:
						opaqueBackground = 0x000000;
						_lightButton.selected = false;
						break;
				}
			}
			
			if( !style || style == FontSize.STYLENAME )
			{
				height = FontSize.getTextRowHeight( this ) * 1.5 + 3;
				
				updateMidiInputIndicatorWidth();
			}
		}

			
		override public function getInfoToDisplay( event:Event ):Info
		{
			var infos:InfoMarkupForViews = InfoMarkupForViews.instance;
			
			var button:RibbonButton = Utilities.getAncestorByType( event.target, RibbonButton ) as RibbonButton;
			
			if( button == _playButton ) return infos.getInfoForView( "PlayButton" );
			if( button == _pauseButton ) return infos.getInfoForView( "PauseButton" );
			if( button == _arrangeButton ) return infos.getInfoForView( "ArrangeViewButton" );			
			if( button == _liveButton ) return infos.getInfoForView( "LiveViewButton" );
			if( button == _midiButton ) return infos.getInfoForView( "MidiInputButton" );
			if( button == _lightButton ) return infos.getInfoForView( "LightingButton" );
				
			return null;
		}
			

		override protected function onAllDataChanged():void 
		{
			updateViewmodeButtons();
			updatePlaystateButtons();
		}

		
		private function onCreationComplete():void
		{
			horizontalScrollPolicy = ScrollPolicy.OFF; 
			verticalScrollPolicy = ScrollPolicy.OFF;   
			
			addUpdateMethod( SetViewMode, onViewModeChanged );
			addUpdateMethod( SetPlaying, onPlaystateChanged );
			addUpdateMethod( ReceiveMidiInput, onReceiveMidiInput );
			
			_midiInputTimer.addEventListener( TimerEvent.TIMER, onMidiInputTimer );
		}


		private function onViewModeChanged( command:SetViewMode ):void
		{
			updateViewmodeButtons();
		}
		
		
		private function onPlaystateChanged( command:SetPlaying ):void
		{
			updatePlaystateButtons();
		}
			
			
		private function onReceiveMidiInput( command:ReceiveMidiInput ):void
		{
			if( command.midiID != model.project.midi.id ) return;
			
			_midiButton.pulse();
		}


		private function updateViewmodeButtons():void
		{
			var viewMode:String = model.project.projectUserData.viewMode.mode;

			_arrangeButton.selected = ( viewMode == ViewMode.ARRANGE );
			_liveButton.selected = ( viewMode == ViewMode.LIVE );
		}
		
		
		private function updatePlaystateButtons():void
		{
			var playing:Boolean = model.project.player.playing;
			
			_playButton.selected = playing;
			_pauseButton.selected = !playing; 
		}
		
		
 		private function switchToArrangeView():void
 		{
 			var viewMode:ViewMode = model.project.projectUserData.viewMode.clone();
			viewMode.mode = ViewMode.ARRANGE;
 			controller.processCommand( new SetViewMode( viewMode ) );
 		}


 		private function switchToLiveView():void
 		{
 			var viewMode:ViewMode = model.project.projectUserData.viewMode.clone();
 			viewMode.mode = ViewMode.LIVE;
 			controller.processCommand( new SetViewMode( viewMode ) );
 		}
 		
 		
 		private function play():void
 		{
 			controller.processCommand( new SetPlaying( true ) );
 		}


 		private function pause():void
 		{
 			controller.processCommand( new SetPlaying( false ) );
 		}
 		
			
		private function toggleMidiInfo():void
		{
			_midiButton.selected = !_midiButton.selected;
			
			if( _midiInputDirection == 0 )
			{
				_midiInputTimer.start();
			}
			_midiInputDirection = _midiButton.selected ? 1 : -1;
			
		}
			
			
		private function onMidiInputTimer( event:TimerEvent ):void
		{
			_midiInputInterpolation = Math.max( 0, Math.min( 1, _midiInputInterpolation + _midiInputDirection * _midiInputStep ) );
			
			if( _midiInputInterpolation > 0 )
			{
				if( _midiInputIndicator.parent != _midiInputContainer )
				{
					_midiInputContainer.addChild( _midiInputIndicator );
				}
				
				updateMidiInputIndicatorWidth();
				
				if( _midiInputInterpolation == 1 )
				{
					_midiInputTimer.stop();
					_midiInputDirection = 0;
				}
			}
			else
			{
				if( _midiInputIndicator.parent == _midiInputContainer )
				{
					_midiInputContainer.removeChild( _midiInputIndicator );
					_midiInputTimer.stop();
					_midiInputDirection = 0;
				}
			}
		}
			
			
		private function updateMidiInputIndicatorWidth():void
		{
			_midiInputIndicator.width = _midiInputIndicator.fullWidth * _midiInputInterpolation; 
		}

			
 		private function toggleLighting():void
 		{
 			switch( model.project.projectUserData.colorScheme )
 			{
 				case ColorScheme.LIGHT:
 					controller.processCommand( new SetColorScheme( ColorScheme.DARK ) );
 					break;

 				case ColorScheme.DARK:
 					controller.processCommand( new SetColorScheme( ColorScheme.LIGHT ) );
 					break;
 					
 				default:
 					Assert.assertTrue( false );
 					break;
 			}
 		}
			
			
		private var _midiInputIndicator:MidiInputIndicator = new MidiInputIndicator;
		private var _midiInputInterpolation:Number = 0;
		private var _midiInputDirection:int = 0;
		private var _midiInputTimer:Timer = new Timer( _midiInputTimerDelay );

		private static const _midiInputTimerDelay:Number = 20;
		private static const _midiInputStep:Number = 0.1;
			
		]]>
	</fx:Script>	

	<mx:HBox paddingLeft="5" horizontalGap="20" verticalCenter="0">
		<mx:HBox horizontalGap="5">
			<RibbonBar:RibbonButton id="_playButton" 
									ribbonButtonIcon="{RibbonButton.RIBBONICON_PLAY}" 
									click="{play()}" />
			<RibbonBar:RibbonButton id="_pauseButton" 
									ribbonButtonIcon="{RibbonButton.RIBBONICON_PAUSE}" 
									click="{pause()}"/>
		</mx:HBox>
		<mx:HBox horizontalGap="5">
			<RibbonBar:RibbonButton id="_arrangeButton" 
									ribbonButtonLabel="Arrange" 
									click="{switchToArrangeView()}"/>
			<RibbonBar:RibbonButton id="_liveButton" 
									ribbonButtonLabel="Live" 
									click="{switchToLiveView()}"/>
		</mx:HBox>
	</mx:HBox>
	<mx:HBox right="20" horizontalGap="20" verticalCenter="0">
		<mx:HBox id="_midiInputContainer" horizontalGap="5">
			<RibbonBar:RibbonButton id="_midiButton" 
									ribbonButtonIcon="{RibbonButton.RIBBONICON_MIDI}"
									receivesPulses="true"
									click="{toggleMidiInfo()}"/>
		</mx:HBox>
		<RibbonBar:RibbonButton id="_lightButton" 
								ribbonButtonIcon="{RibbonButton.RIBBONICON_LIGHT}" 
								click="{toggleLighting()}"/>
	</mx:HBox>
	

</IntegraView>
