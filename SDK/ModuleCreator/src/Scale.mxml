<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" borderStyle="inset" xmlns:local="*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<mx:VBox styleName="internalPadding">
		<mx:HBox>
			<mx:Label text="Scale" width="{Globals.labelColumnWidth( 3 )}"/>
			<mx:List id="_scaleType" 
					 change="{ onChangeScaleType() }" 
					 toolTip="Choose Scale type"
					 rowCount="{ _scaleType.dataProvider.length }"
					 verticalAlign="middle"
					 styleName="smallRows"
					 width="{Globals.propertyColumnWidth( 3 )}" 
					 dataProvider="{[_linearLabel, _exponentialLabel, _decibelLabel ]}"/>		
		</mx:HBox>
	</mx:VBox>
	
	<fx:Script>
		<![CDATA[	
			
			public function doInitialize():void
			{
				_scaleType.selectedItem = _linearLabel;
			}
			
			
			public function setRange( minimum:Number, maximum:Number ):void
			{
				_rangeMinimum = minimum;
				_rangeMaximum = maximum;
				
				validateContent();
			}
			
			
			public function validateContent():Boolean
			{
				var valid:Boolean = true;
				
				_scaleType.errorString = null;
				if( _scaleType.selectedItem == _exponentialLabel )
				{
					if( _rangeMinimum <= 0 )
					{
						_scaleType.errorString = "Exponential Scales can only be used when minimum range is greater than 0";
						valid = false;
					}
					else
					{
						if( _rangeMaximum <= _rangeMinimum )
						{
							_scaleType.errorString = "Exponential Scales can only be used when maximum value is greater than minimum value";
							valid = false;
						}
					}
				}
				
				return valid;
			}
			
			
			public function loadFromXML( xml:XMLList ):Boolean
			{
				if( !xml.hasOwnProperty( "ScaleType" ) ) return false;
				
				switch( xml.ScaleType.toString() )
				{
					case "linear":
						_scaleType.selectedItem = _linearLabel;
						break;
					
					case "exponential":
						_scaleType.selectedItem = _exponentialLabel;
						break;
					
					case "decibel":
						_scaleType.selectedItem = _decibelLabel;
						break;
					
					default:
						return false;
				}				

				return true;
			}
			
			
			public function saveToXML():XML
			{
				var xml:XML = new XML( "<Scale></Scale>" );
				
				switch( _scaleType.selectedItem.toString() )
				{
					case _linearLabel:
						xml.appendChild( <ScaleType>linear</ScaleType> );
						break;
					
					case _exponentialLabel:
						xml.appendChild( <ScaleType>exponential</ScaleType> );
						break;	
					
					case _decibelLabel:
						xml.appendChild( <ScaleType>decibel</ScaleType> );
						break;
				}				
				
				return xml;
			}		
			
			
			private function onChangeScaleType():void
			{
				interfaceChanged();
			}

			
			private function interfaceChanged():void
			{
				dispatchEvent( new Event( Globals.modifiedEvent ) );
				validateContent();
			}			
			
			
			private var _rangeMinimum:Number = 0;
			private var _rangeMaximum:Number = 0;
			
			private const _linearLabel:String = "Linear";
			private const _exponentialLabel:String = "Exponential";
			private const _decibelLabel:String = "Decibel";
			
		]]>
	</fx:Script>		
	
</mx:Canvas>
