========================================
BACKGROUND

These folders contain a collection of XSD schemas and XSL transforms used to validate and document structures used by libIntegra and its client applications.

XML samples are also provided for each.

Validation is performed as follows:
	* When libIntegra initialises its modules, each Interface Definition (IID) document is validated against iid.xsd
		- this appears to slow the initialisation down quite significantly - consider adding a command line flag to make validation optional (defaulting to off)?
		- as currently implemented, this appears to happen twice for each module - review alternative options?
	* Whenever a .integra file is loaded via the CFileIO::load method:
		* Its IXD payload document is validated 'as is' against CollectionSchema.xsd (this is just as has been the case historically)
		* The same IXD is reified by applying the XSL transform reify-ixd.xsl; the output document is then validated against rixd.xsd

NOTE:	"Reification" refers to transformations in which abstract inter-file references (e.g. module guids) 
		in the source documents are replaced by strongly typed instances of relevant data (e.g. named elements
		and schema-constrained attributes) to allow pure XSD validation of the resulting document structure.

========================================

2014

* module-collection.xml
	- a Module Collection document, indexing all locally defined modules
	- articulates the name, module GUID and origin GUID of every module whose use we wish to validate
	- can be auto-generated by running win-extract-ixd.cmd (\web\project-browser\data) against a folder of Integra modules (typically /modules)

* module-collection.xsd
	- schema definitions for Module Collection documents

* reify-module-collection.xsl (http://www.integralive.org/schemas/2014/riid)
	- tranformation rules for reifying Integra Module Collection documents
	- output is an XSD schema, defining an attribute group for each supported module
	- collates endpoint constraints for each listed module 
	- utilises reify-iid.xsl to extract this data from the relevant IID files

* reify-ixd.xsl
	- tranformation rules for reifying Integra Container documents (IXD to RIXD)
	- resolves origin guids to element names
	- strips out module guids (implementation-specific testing not currently supported)

* reify-iid.xsl
	- tranformation rules for reifying Integra Interface Definition documents (IID to RIID)

* iid.xsd
	- schema definitions for libIntegra Integra Interface Definition (IID) files
	- permits either of two root elements:
		- InterfaceDeclaration (declaring the interface of a specific module, for loading into libIntegra)
		- IntegraModules (listing interfaces for multiple modules, for use in project browser web application)

* riid.xsd (http://www.integralive.org/schemas/2014/riid)
	- defines XSD attribute groups for use within the reified Integra Container format (RIXD)
	- auto-generated by running reify-module-collection.xsl against module-collection.xml
	- represents the full set of IID module interface contracts as XSD attribute types
	- defines minimal base types (core and non-core) for use as module instances in IXD node graphs
	- depends on rixd.base.xsd
	
* rixd.xsd (http://www.integralive.org/schemas/2014/rixd)
	- schema definitions for the reified Integra Container format (RIXD)
	- instances of this schema are generated automatically from instances of the main IXD container format via the XSL transform reify-ixd.xsl
	- as per IXD, instances define a given DSP graph and its current state at some point in time
	- unlike IXD, the DSP graph is strongly typed to allow more complex structural validation:
		- nested module instances (IXD 'object' elements) are represented as named, namespaced XML elements
		- endpoint attributes (IXD 'attribute' elements) are represented schema-compliant XML attributes on those elements
	- depends on riid.xsd, rixd.core.xsd

* rixd.base.xsd (http://www.integralive.org/schemas/2014/rixd/base)
	- XML Schema definitions for simple types and base attribute groups within the reified Integra container format (RIID).
	- defines simple types for storage of legal node name, datetime and guid values
	- defines a base attribute group to be implemented by all reified module nodes

* rixd.core.xsd (http://www.integralive.org/schemas/2014/rixd/core)
	- XML Schema definitions for bundled core module instances within the reified Integra container format (RIXD) and their permitted arrangements
	- This file contains manually duplicated versions of the core module complexType/group definitions in riid.xsd which:
		- refer to the original attributeGroup definitions in riid.xsd
		- are defined in a separate namespace (2014/rixd/core as distinct from 2014/riid)
	- Use of the Container module is represented in multiple group/complexType definitions, which explicitly define legal nesting arrangements for a reified Integra Live node graph:
		- group 'core:rootContainer' specifies legal contents for the root element (currently being a single projectContainer)
		- type 'core:projectContainer' specifies legal contents for each project (currently being a single core:player node, followed by arbitrary number of core:trackContainer, core:connection and deprecated nodes)
		- type 'core:trackContainer' specifies legal contents for each track (currently being an arbitrary number of core:blockContainer, core:connection, core:envelope, user and deprecated nodes)
		- type 'core:blockContainer'specifies legal contents for each block (currently being an arbitrary number of core:Connection, core:Envelope, core:Scaler, core:Script, core:AudioIn, core:AudioOut, core:StereoAudioIn, core:StereoAudioOut, non-core, user and deprecated nodes)
	- depends on riid.xsd, rixd.xsd, rixd.base.xsd, rixd.native.xsd

* rixd.native.xsd (http://www.integralive.org/schemas/2014/rixd/native)
	- XML Schema definitions for bundled non-core ('native') module instances within the reified Integra container format (RIXD)
	- This file contains manually duplicated versions of the non-core module complexType/group definitions in riid.xsd which:
		- refer to the original attributeGroup definitions in riid.xsd
		- are defined in a separate namespace (2014/rixd/core as distinct from 2014/riid)
	- No nesting options are defined, as non-core modules are currently permitted only as children of block containers
	- depends on rixd.base.xsd, riid.xsd

* rixd.deprecated.xsd (http://www.integralive.org/schemas/2014/rixd/deprecated)
	- an empty schema, currently serving as a stub for any future requirement to validate against deprecated modules.

* rixd.user.xsd (http://www.integralive.org/schemas/2014/rixd/user)
	- an empty schema, currently serving as a stub for any future requirement to validate against user-designed modules.

* AudioThru.ixd
	- a sample Integra Container document (taken from the bundled AudioThru code block)
	
* AudioThru.rixd
	- a reified version of AudioThru.ixd, included for illustrative purposes
	
* Sound Loop Vocoder.ixd
	- a sample Integra Container document (taken from sample project Sound Loop Vocoder)

* Sound Loop Vocoder.rixd
	- a reified version of Sound Loop Vocoder.ixd, included for illustrative purposes

========================================
	
v2.0 (legacy documents - deleted 11/01/16

* ixd.xsd - a new, more semantically robust version of the libIntegra extract schema, for use by v2.0
* gixd.xsd - a new, more semantically robust version of the libIntegra extract schema, for use by v2.0; extends IXD-2.0
* iid.xsd - currently as IID-1.7, pending review of functional extension

========================================

v1.7 (legacy documents - deleted 11/01/16)

* ixd.xsd - a retrofitted schema for all libIntegra extracts prior to v2.0
* gixd.xsd - a retrofitted schema for Integra Live projects prior to v2.0; extends IXD-1.7
* iid.xsd - a codification of the implicit Module Interface Definition schema, as supported by the Module Creator application prior to v2.0

========================================
