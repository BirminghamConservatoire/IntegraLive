<?xml version="1.0" encoding="utf-8"?>
<!--
* Integra Live graphical user interface
*
* Copyright (C) 2009 Birmingham City University
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA   02110-1301,
* USA.
-->
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 verticalScrollPolicy="auto"
		 initialize="{onInitialize()}"
		 mouseDown="{onMouseDown( event )}"
		 rightMouseDown="{onMouseDown( event )}"
		 doubleClick="{onDoubleClick( event )}"
		 keyDown="{onKeyDown( event )}"
		 paddingTop="3" paddingBottom="3" paddingLeft="3" paddingRight="3"
		 verticalGap="3">
	<fx:Declarations>
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import components.utils.Utilities;
			import components.views.ModuleLibrary.ModuleLibraryListEntry;
			
			import flexunit.framework.Assert;
	
			override public function set data( value:Object ):void
			{
				super.data = value;
				
				visible = false;
				
				removeAllChildren();
				
				_selectedIndex = -1;

				var data:Array = value as Array;
				if( data )
				{
					for each( var listEntry:Object in data )
					{
						var libraryItem:LibraryItem = new LibraryItem;
						libraryItem.percentWidth = 100;
						libraryItem.data = listEntry;
						
						addChild( libraryItem );
					}
				}
				
				visible = true;
			}
			
			public function getLibraryItemAt( index:int ):LibraryItem
			{
				Assert.assertTrue( index >= 0 && index < numChildren );
				
				var item:LibraryItem = getChildAt( index ) as LibraryItem;
				
				Assert.assertNotNull( item );
				
				return item; 
			}
			
			
			public function get selectedItem():LibraryItem 
			{
				if( _selectedIndex < 0 ) return null;
				
				return getLibraryItemAt( _selectedIndex );
			}
			
			
			public function selectFirstLine():Boolean
			{
				var firstSelectable:int = getNextSelectableLine( 0 );
				if( firstSelectable >= 0 && firstSelectable != _selectedIndex )
				{
					select( firstSelectable, LibraryItem.FIRST_CHILD );
					return true;
				}
				else
				{
					return false;
				}
			}
			
			
			public function selectLastLine():Boolean
			{
				var lastSelectable:int = getPrevSelectableLine( numChildren - 1 );
				if( lastSelectable >= 0 && lastSelectable != _selectedIndex )
				{
					select( lastSelectable, LibraryItem.LAST_CHILD );
					return true;
				}
				else
				{
					return false;
				}
			}
			
			
			public function clearSelection():void
			{
				select( -1, null );
			}
			
			
			public function search( searchText:String, direction:int, skipFirstItem:Boolean, wrapAround:Boolean ):Boolean
			{
				Assert.assertTrue( direction == 1 || direction == -1 );
				
				var searchStart:int = ( _selectedIndex >= 0 ) ? _selectedIndex : ( direction > 0 ) ? 0 : numChildren - 1;
				
				var searchEnd:int;
				if( wrapAround )
				{
					searchEnd = searchStart - direction;
					if( searchEnd < 0 ) searchEnd += numChildren;
					if( searchEnd >= numChildren ) searchEnd -= numChildren;
				}
				else
				{
					searchEnd = (direction > 0 ) ? numChildren - 1 : 0;
				}
				
				var skipNextItem:Boolean = skipFirstItem;
				var searchIndex:int = searchStart;

				while( true )
				{
					var item:LibraryItem = getLibraryItemAt( searchIndex ); 
					if( !item.isLabel ) 
					{
						if( item.searchChildList( searchText, direction, skipNextItem ) )
						{
							select( searchIndex, null );
							return true;
						}
						
						if( skipNextItem )
						{
							skipNextItem = false;
						}
						else
						{
							if( item.matchesSearch( searchText ) )
							{
								select( searchIndex, LibraryItem.FIRST_CHILD );
								return true;
							}
						}
					}
					
					if( searchIndex == searchEnd )
					{
						return false;
					}
					
					searchIndex += direction;
					if( searchIndex < 0 ) searchIndex += numChildren;
					if( searchIndex >= numChildren ) searchIndex -= numChildren;
				}
				
				Assert.assertTrue( false );	//can't ever get here
				return false;
			}
			
			
			private function onInitialize():void
			{
				addEventListener( FocusEvent.FOCUS_OUT, onFocusOut );
			}
			
			
			private function onMouseDown( event:MouseEvent ):void
			{
				setFocus();
				
				var clickItem:LibraryItem = Utilities.getAncestorByType( event.target, LibraryItem ) as LibraryItem;
				if( !clickItem || !Utilities.isDescendant( clickItem, this ) ) return;
				
				var clickIndex:int = getChildIndex( clickItem );
				Assert.assertTrue( clickIndex >= 0 && clickIndex < numChildren );

				select( clickIndex, LibraryItem.FIRST_CHILD );
				
				var parentLibraryItem:LibraryItem = Utilities.getAncestorByType( this, LibraryItem ) as LibraryItem;
				if( parentLibraryItem )
				{
					var parentLibrary:Library = Utilities.getAncestorByType( parentLibraryItem, Library ) as Library;
					Assert.assertNotNull( parentLibrary );
					parentLibrary.select( parentLibrary.getChildIndex( parentLibraryItem ), null ); 
					
				}
				
				event.stopPropagation();
			}
			
			
			private function onDoubleClick( event:MouseEvent ):void
			{
				if( _selectedIndex >= 0 ) 
				{
					if( getLibraryItemAt( _selectedIndex ).isSelectable )
					{
						instantiateSelection();
					}
					
					event.stopPropagation();
				}
			}
			
			
			private function onKeyDown( event:KeyboardEvent ):void
			{
				if( _selectedIndex < 0 ) return;
				
				Assert.assertTrue( numChildren > 0 );
				
				var usedEvent:Boolean = false;
				var shouldPassToAncestor:Boolean = false;
				
				switch( event.keyCode )
				{
					case Keyboard.UP:
						usedEvent = selectPrevLine();
						shouldPassToAncestor = !usedEvent;
						break;
					
					case Keyboard.DOWN:
						usedEvent = selectNextLine();
						shouldPassToAncestor = !usedEvent;
						break;
					
					case Keyboard.PAGE_UP:
						usedEvent = pageUp();
						shouldPassToAncestor = true;
						break;
					
					case Keyboard.PAGE_DOWN:
						usedEvent = pageDown();
						shouldPassToAncestor = true;
						break;

					case Keyboard.HOME:
						usedEvent = selectFirstLine();
						shouldPassToAncestor = true;
						break;
					
					case Keyboard.END:
						usedEvent = selectLastLine();
						shouldPassToAncestor = true;
						break;

					case Keyboard.LEFT:
					case Keyboard.RIGHT:
						expandSelectedItem();
						break;
					
					case Keyboard.ENTER:
						instantiateSelection();
						usedEvent = true;
						break;
					
				}
				
				event.stopImmediatePropagation();
				event.preventDefault();
				
				if( usedEvent )
				{
					if( event is LibraryKeyboardEvent )
					{
						( event as LibraryKeyboardEvent ).eventWasUsed = true;
					}
				}

				if( shouldPassToAncestor )
				{
					var ancestorLibrary:Library = Utilities.getAncestorByType( parent, Library ) as Library;
					if( ancestorLibrary )
					{
						var ancestorEvent:LibraryKeyboardEvent = new LibraryKeyboardEvent( event );
						ancestorLibrary.dispatchEvent( ancestorEvent );
						
						if( ancestorEvent.eventWasUsed )
						{
							ancestorLibrary.setFocus();
						}
					}
				}
			}
			
			
			private function getPrevSelectableLine( index:int ):int 
			{
				for( var candidate:int = index; candidate >= 0; candidate-- )
				{
					if( getLibraryItemAt( candidate ).isSelectable ) 
					{
						return candidate;
					}
				}
				
				return -1;
			}

			
			private function getNextSelectableLine( index:int ):int 
			{
				for( var candidate:int = index; candidate < numChildren; candidate++ )
				{
					if( getLibraryItemAt( candidate ).isSelectable ) 
					{
						return candidate;
					}
				}
				
				return -1;
			}
			
			
			private function selectPrevLine():Boolean
			{
				var prevSelectableLine:int = getPrevSelectableLine( _selectedIndex - 1 );
				if( prevSelectableLine >= 0 ) 
				{
					select( prevSelectableLine, LibraryItem.LAST_CHILD );
					return true;
				}
				else
				{
					return false;
				}
			}

			
			private function selectNextLine():Boolean
			{
				var nextSelectableLine:int = getNextSelectableLine( _selectedIndex + 1 );
				if( nextSelectableLine >= 0 ) 
				{
					select( nextSelectableLine, LibraryItem.FIRST_CHILD );
					return true;
				}
				else
				{
					return false;
				}
			}

			
			private function pageUp():Boolean
			{
				var firstVisibleItem:LibraryItem = this.firstVisibleSelectableItem;
				if( !firstVisibleItem ) return false;
				
				if( firstVisibleItem.selected )
				{
					var verticalGap:Number = getStyle( "verticalGap" );
					
					var scrollAmount:Number = firstVisibleItem.height;
					for( var i:int = getChildIndex( firstVisibleItem ) - 1; i >= 0; i-- )
					{
						scrollAmount += ( getLibraryItemAt( i ).height + verticalGap );
						if( scrollAmount >= height )
						{
							return select( getNextSelectableLine( i + 1 ), LibraryItem.FIRST_CHILD );
						}
					}
					
					return selectFirstLine();
				}
				else
				{
					return select( getChildIndex( firstVisibleItem ), LibraryItem.FIRST_CHILD );
				}
			}
			
			
			private function pageDown():Boolean
			{
				var lastVisibleItem:LibraryItem = this.lastVisibleSelectableItem;
				if( !lastVisibleItem ) return false;
				
				if( lastVisibleItem.selected )
				{
					var verticalGap:Number = getStyle( "verticalGap" );
					
					var scrollAmount:Number = lastVisibleItem.height;
					for( var i:int = getChildIndex( lastVisibleItem ) + 1; i < numChildren; i++ )
					{
						scrollAmount += ( getLibraryItemAt( i ).height + verticalGap );
						if( scrollAmount >= height )
						{
							return select( getPrevSelectableLine( i - 1 ), LibraryItem.LAST_CHILD );
						}
					}
					
					return selectLastLine();
				}
				else
				{
					return select( getChildIndex( lastVisibleItem ), LibraryItem.LAST_CHILD );
				}				
			}


			private function expandSelectedItem():void
			{
				Assert.assertTrue( _selectedIndex >= 0 );
				
				getLibraryItemAt( _selectedIndex ).toggleExpanded();
			}
			
			
			/*
			private function onFocusOut( event:FocusEvent ):void
			{
				var newFocus:InteractiveObject = event.relatedObject;
				if( newFocus )
				{
					var otherLibrary:Library = Utilities.getAncestorByType( newFocus, Library ) as Library;
					if( otherLibrary && otherLibrary != this )
					{
						if( Utilities.isDescendant( this, otherLibrary ) || Utilities.isDescendant( otherLibrary, this ) )
						{
							select( -1, null );
						}
					}
				}
			}
			*/
			
			
			private function onFocusOut( event:FocusEvent ):void
			{
				/*var newFocus:InteractiveObject = event.relatedObject;
				if( newFocus )
				{
					if( Utilities.isEqualOrDescendant( newFocus, this ) )
					{
						return;
					}
				}

				select( -1, null );	*/
			}
			
			
			private function select( index:int, childToSelect:String ):Boolean
			{
				if( index == _selectedIndex ) 
				{
					return false;
				}
				
				if( _selectedIndex >= 0 )
				{
					getLibraryItemAt( _selectedIndex ).selected = false;
				}
					
				_selectedIndex = index;
				
				if( _selectedIndex >= 0 )
				{
					var newItem:LibraryItem = getLibraryItemAt( _selectedIndex );
					newItem.selected = true;
					
					scrollToSelection();
					
					if( childToSelect )
					{
						newItem.selectChildList( childToSelect );
					}
				}
				
				return true;
			}
			
			
			private function scrollToSelection():void
			{
				Assert.assertTrue( _selectedIndex >= 0 );
				var item:LibraryItem = getLibraryItemAt( _selectedIndex );
				Assert.assertNotNull( LibraryItem );
				
				var itemRect:Rectangle = item.getRect( this );
				var libraryRect:Rectangle = this.getRect( this );

				if( itemRect.top < 0 )
				{
					verticalScrollPosition += itemRect.top;
				}

				if( itemRect.bottom > libraryRect.bottom )
				{
					verticalScrollPosition += ( itemRect.bottom - libraryRect.bottom );
				}
			}
			
			
			private function get firstVisibleSelectableItem():LibraryItem
			{
				const margin:Number = 4;
				
				for( var i:int = 0; i < numChildren; i++ )
				{
					var item:LibraryItem = getLibraryItemAt( i );
					if( !item.isSelectable ) continue;
						
					if( item.getRect( this ).top > -margin )
					{
						return item;
					}
				}
				
				return null;
			}
			
			
			private function get lastVisibleSelectableItem():LibraryItem
			{
				const margin:Number = 4;
				
				for( var i:int = numChildren - 1; i >= 0; i-- )
				{
					var item:LibraryItem = getLibraryItemAt( i );
					if( !item.isSelectable ) continue;
					
					if( item.getRect( this ).bottom < height + margin )
					{
						return item;
					}
				}
				
				return null;
			}
			
			
			private function instantiateSelection():void
			{
				Assert.assertTrue( _selectedIndex >= 0 );
				
				var item:LibraryItem = getLibraryItemAt( _selectedIndex );
				Assert.assertNotNull( item );
				
				Assert.assertTrue( item.isSelectable );

				item.dispatchEvent( new Event( LibraryItem.INSTANTIATE_EVENT, true ) );
			}
			
			
			private var _selectedIndex:int = -1;
			
			
		]]>
	</fx:Script>


</mx:VBox>
