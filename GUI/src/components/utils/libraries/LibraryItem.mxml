<?xml version="1.0" encoding="utf-8"?>
<!--
 * Integra Live graphical user interface
 *
 * Copyright (C) 2009 Birmingham City University
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA   02110-1301,
 * USA.
 -->
 <mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009"
			xmlns:mx="library://ns.adobe.com/flex/mx"
			xmlns:libraries="components.utils.libraries.*"
			initialize="{onInitialize()}"
			mouseDown="{onMouseDown( event )}"
			horizontalScrollPolicy="off" verticalScrollPolicy="off">

	<mx:Label id="_itemLabel" 
			  text="{data.toString()}"/>

	<mx:Button id="_collapseButton" 
			   toggle="true" 
			   click="onClickCollapseButton( event )"
			   doubleClick="onClickCollapseButton( event )"
			   skin="components.views.Skins.CollapseButtonSkin"
			   visible="false"/>

	<libraries:Library id="_childLibrary"
			    verticalGap="0"
				visible="false"/>
	 
	<fx:Script>
    	<![CDATA[
			import flash.filters.DropShadowFilter;
			
			import mx.core.DragSource;
			import mx.managers.DragManager;
			
			import components.model.userData.ColorScheme;
			import components.utils.DragImage;
			import components.utils.FontSize;
			import components.utils.Utilities;
			import components.views.MouseCapture;
			import components.views.Skins.CollapseButtonSkin;
			
			import flexunit.framework.Assert;

			
			public function get selected():Boolean { return _selected; }
			public function get isSelectable():Boolean { return !isLabel; }
			
			public function set selected( selected:Boolean ):void 
			{
				if( selected != _selected )
				{
					_selected = selected;
					invalidateDisplayList();
					
					if( !selected )
					{
						_childLibrary.clearSelection();
					}
				}
			}
			
			
			public function toggleExpanded():void
			{
				if( !_collapseButton.visible ) return;
				
				doExpand( !expanded );
				
				if( expanded )
				{
					//collapse siblings
					var library:Library = parent as Library;
					if( library )
					{
						var numberOfSiblings:int = library.numChildren;
						for( var i:int = 0; i < numberOfSiblings; i++ )
						{
							var sibling:LibraryItem = library.getLibraryItemAt( i );
							if( sibling == this ) continue;
							
							if( sibling.expanded )
							{
								sibling.doExpand( false );
							}
						}
					}
				}
			}
			

			public function selectChildList( childToSelect:String ):void
			{
				if( expanded )
				{
					switch( childToSelect )
					{
						case FIRST_CHILD:
							_childLibrary.selectFirstLine();
							break;
						
						case LAST_CHILD:
							_childLibrary.selectLastLine();
							break;
						
						default:
							Assert.assertTrue( false );
							break;
					}
					
					_childLibrary.setFocus();					
				}
			}
			
			
			override public function set data( value:Object ):void
			{
				super.data = value;
				if( !_initialized ) return;
				
				updateChildLibrary();
				styleChanged( null );
			}
			
			
			override public function styleChanged( style:String ):void
			{
				if( !style || style == ColorScheme.STYLENAME )
				{
					var color:uint;
					var collapseButtonColor:uint;
					switch( getStyle( ColorScheme.STYLENAME ) )
					{
						default:
						case ColorScheme.LIGHT:
							color = Utilities.applyTint( 0x808080, tint );
							collapseButtonColor = Utilities.applyTint( 0xc0c0c0, tint );
							_backgroundColors = [ Utilities.applyTint( 0xd8d8d8, tint ), Utilities.applyTint( 0xefefef, tint ) ]; 
							break;
						
						case ColorScheme.DARK:
							color = Utilities.applyTint( 0x808080, tint );
							collapseButtonColor = Utilities.applyTint( 0x808080, tint );
							_backgroundColors = [ Utilities.applyTint( 0x282828, tint ), Utilities.applyTint( 0x101010, tint ) ]; 
							break;
					}

					setStyle( "color", color );
					
					if( _collapseButton )
					{
						_collapseButton.setStyle( "color", collapseButtonColor );
					}
					
					invalidateDisplayList();
					updateFilters();
				}
				
				if( !style || style == FontSize.STYLENAME )
				{
					if( _initialized )
					{
						positionContent();
					}
				}
			}
			

			override protected function updateDisplayList( width:Number, height:Number):void
			{
				super.updateDisplayList( width, height );
	
	            graphics.clear();

				if( isLabel )
				{
					if( isDifferentTintToAncestor )
					{
						graphics.beginFill( _backgroundColors[ 0 ] );
						graphics.drawRect( 0, 0, width, height );
						graphics.endFill();
					}
				}
				else
				{
					const alphas:Array =  [ 1, 1 ];
					const ratios:Array = [0x00, 0xFF];
		
					var matrix:Matrix = new Matrix();
		  			matrix.createGradientBox( width, height, Math.PI / 2 );
		
					if( !expanded )
					{
						if( _selected )
						{
							graphics.lineStyle( 2, getStyle( "color" ), 0.5 );
						}
						else
						{
							if( _over )
							{
								graphics.lineStyle( 1, getStyle( "color" ), 0.5 );
							}
						}
					}
					
					graphics.beginGradientFill( GradientType.LINEAR, _backgroundColors, alphas, ratios, matrix );
		        	graphics.drawRoundRect( 0, 0, width, height, _cornerWidth, _cornerHeight );
		        	graphics.endFill();
					
					if( dragSource && !expanded )
					{
						var titleHeight:Number = this.titleHeight;
						var grabHandleSize:Number = titleHeight * 0.3;
						var grabHandleOffset:Number = ( titleHeight - grabHandleSize ) * 0.5;
						drawGrabHandle( grabHandleOffset, grabHandleOffset, grabHandleSize, grabHandleSize ); 
					}
				}
			}
			
			
			private function get isDifferentTintToAncestor():Boolean
			{
				var ancestor:LibraryItem = Utilities.getAncestorByType( parent, LibraryItem ) as LibraryItem;
				if( !ancestor ) return false;
				
				return ( ancestor.tint != tint );
			}
			
			
			private function drawGrabHandle( x:Number, y:Number, width:Number, height:Number ):void
			{
				const lines:int = 3;
				
				graphics.lineStyle( 1, getStyle( "color" ), 0.5 );
				
				for( var i:int = 0; i < lines; i++ )
				{
					graphics.moveTo( x, y );
					graphics.lineTo( x, y + height );
					x += Math.ceil( width / lines );
				}
			}
			
			
			private function get childData():Array
			{
				if( !data ) return null;
				if( !data.hasOwnProperty( "childData" ) ) return null;
				
				return data[ "childData" ] as Array;
			}

			
			private function get expanded():Boolean
			{
				if( !data ) return false;
				if( !data.hasOwnProperty( "expanded" ) ) return false;
				
				return data[ "expanded" ] as Boolean;
			}

			
			public function get isLabel():Boolean
			{
				if( !data ) return false;
				if( !data.hasOwnProperty( "isLabel" ) ) return false;
				
				return data[ "isLabel" ] as Boolean;
			}
			
			
			private function get tint():uint
			{
				if( !data ) return null;
				if( !data.hasOwnProperty( "tint" ) ) return null;
				
				return data[ "tint" ] as uint;
			}

			
			private function get dragSource():DragSource
			{
				if( !data ) return null;
				if( !data.hasOwnProperty( "dragSource" ) ) return null;
				
				return data[ "dragSource" ] as DragSource;
			}

			
			private function get titleHeight():Number
			{
				if( isLabel ) 
				{
					return _itemLabel.getStyle( FontSize.STYLENAME ) * 2;
				}
				else
				{
					return FontSize.getTextRowHeight( this );
				}				
			}
			
			
			private function onInitialize():void
			{
				_initialized = true;

				addEventListener( MouseEvent.ROLL_OVER, onRollOver );
				addEventListener( MouseEvent.ROLL_OUT, onRollOut );
				_collapseButton.setStyle( CollapseButtonSkin.COLLAPSE_DIRECTION_STYLENAME, CollapseButtonSkin.LEFT );

				updateChildLibrary();
				
				styleChanged( null );
			}
			
			
			private function updateChildLibrary():void
			{
				var hasChildLibrary:Boolean = _childLibrary.visible;

				var childData:Array = childData;
				var needsChildLibrary:Boolean = ( childData && childData.length > 0 ); 

				if( needsChildLibrary )
				{
					if( !hasChildLibrary )
					{
						_collapseButton.visible = true;
						_childLibrary.visible = true;
						_collapseButton.selected = !expanded;
					}
					
					_childLibrary.data = childData;
				}
				else
				{
					if( hasChildLibrary )
					{
						_collapseButton.visible = false;
						_childLibrary.visible = false;
					}
				}
			}
			
			
			private function positionContent():void
			{
				var fontSize:Number = getStyle( FontSize.STYLENAME );
				if( isLabel ) 
				{
					const labelHeightFactor:Number = 0.75;

					fontSize *= labelHeightFactor;
					_itemLabel.setStyle( FontSize.STYLENAME, fontSize );
					_itemLabel.setStyle( "left", 0 ); 
				}
				else
				{
					_itemLabel.setStyle( "left", titleHeight );
				}
				
				_itemLabel.setStyle( "top", ( titleHeight - fontSize ) / 4 );
				_itemLabel.setStyle( "right", _collapseButton.visible ? titleHeight : 0 );
					
				if( _collapseButton.visible )
				{
					var buttonSize:Number = FontSize.getButtonSize( this );
					var buttonMargin:Number = ( titleHeight - buttonSize ) / 2;
					_collapseButton.setStyle( "right", buttonMargin );
					_collapseButton.setStyle( "top", buttonMargin );
	
					_collapseButton.width = buttonSize;
					_collapseButton.height = buttonSize;

					_childLibrary.setStyle( "top", titleHeight );
					_childLibrary.setStyle( "right", 0 );
					_childLibrary.setStyle( "left", 0 );
					//_childLibrary.setStyle( "left", buttonSize );
					_childLibrary.setStyle( "bottom", 0 );
				}

				updateHeight();
			}

			
			private function onClickCollapseButton( event:MouseEvent ):void
			{
				toggleExpanded();
				
				event.stopPropagation();
			}
			
			
			private function doExpand( expand:Boolean ):void
			{
				data.expanded = expand;
				_collapseButton.selected = !expand;
				
				invalidateDisplayList();
				
				if( !_isAnimating )
				{
					_isAnimating = true;
					addEventListener( Event.ENTER_FRAME, onAnimateExpand );
				}
				
				if( expand && selected )
				{
					selectChildList( FIRST_CHILD );
				}
			}
			
			
			private function updateHeight():void
			{
				height = _expandInterpolation * expansionHeight + titleHeight;				
			}

			
			private function onRollOver( event:MouseEvent ):void
			{
				if( MouseCapture.instance.hasCapture ) return;
				if( isLabel ) return;
				
				_over = true;
				invalidateDisplayList();
			}


			private function onRollOut( event:MouseEvent ):void
			{
				if( isLabel ) return;
				
				_over = false;
				invalidateDisplayList();
			}
			
			
			private function onMouseDown( event:MouseEvent ):void
			{
				if( !dragSource ) return;

				var mouseCapture:MouseCapture = MouseCapture.instance;
				if( mouseCapture.hasCapture ) return;
				
				if( event.target == _collapseButton ) return;
				
				if( expanded ) return;
				
				Assert.assertFalse( _dragging );
				
				_clickPoint = new Point( mouseX, mouseY );
				mouseCapture.setCapture( this, onCapturedDrag, onCaptureFinished );
				
				move( x - _pickOffset, y - _pickOffset );
				_picked = true;
				updateFilters();
			}
			
			
			private function onCapturedDrag( event:MouseEvent ):void
			{
				if( _dragging ) return;

				if( new Point( mouseX, mouseY ).subtract( _clickPoint ).length >= _dragThreshold )
				{
					var dragSource:DragSource = this.dragSource;
					if( dragSource )
					{
						DragManager.doDrag( this, dragSource, event );
						_dragging = true;
						
						DragImage.addDragImage( this );
					}
				}
			}
			
			
			private function onCaptureFinished():void
			{
				move( x + _pickOffset, y + _pickOffset );
				_picked = false;

				updateFilters();
				
				if( _dragging )
				{
					DragImage.removeDragImage();
					_dragging = false;
				}
			}
			
			
			private function updateFilters():void
			{
				var filterArray:Array = new Array;
				
				if( _picked )
				{
					filterArray.push( new DropShadowFilter( _pickOffset, 45, getStyle( "color" ) ) );
				}
				
				filters = filterArray;
			}	
			
			
			private function onAnimateExpand( event:Event ):void
			{
				Assert.assertTrue( _isAnimating );
				if( expanded )
				{
					_expandInterpolation += _expandAnimationStep;
					if( _expandInterpolation >= 1 )
					{
						_expandInterpolation = 1;
						removeEventListener( Event.ENTER_FRAME, onAnimateExpand );
						_isAnimating = false;
					}

					updateHeight();
					
					callLater( scrollParentIfNecessary );
				}
				else
				{
					_expandInterpolation -= _expandAnimationStep;
					if( _expandInterpolation <= 0 )
					{
						_expandInterpolation = 0;
						removeEventListener( Event.ENTER_FRAME, onAnimateExpand );
						_isAnimating = false;
					}
					
					updateHeight();
				}
			}
			
			
			private function scrollParentIfNecessary():void
			{
				var library:Library = parent as Library;
				if( !library ) return;
				
				var myRect:Rectangle = this.getRect( library );
				var libraryRect:Rectangle = library.getRect( library );
				
				if( myRect.bottom > libraryRect.bottom )
				{
					library.verticalScrollPosition += ( myRect.bottom - libraryRect.bottom );
				}
			}
			
			
			private function get expansionHeight():Number
			{
				const bottomMargin:Number = 6;
				
				var expansionHeight:Number = bottomMargin;
				for( var i:int = 0; i < _childLibrary.numChildren; i++ )
				{
					expansionHeight += _childLibrary.getLibraryItemAt( i ).titleHeight;
				}
				
				return expansionHeight;
				
			}			

			private var _initialized:Boolean = false;
			
			private var _isAnimating:Boolean = false;
			private var _expandInterpolation:Number = 0;
			
			private var _over:Boolean = false;
			private var _picked:Boolean = false;
			private var _selected:Boolean = false;
			private var _clickPoint:Point = null;
			
			private var _backgroundColors:Array;
			
			private var _dragging:Boolean = false;
			
			
			private static const _cornerWidth:Number = 4;
			private static const _cornerHeight:Number = 4;
			
			private static const _expandAnimationStep:Number = 0.2;
			
			private static const _dragThreshold:Number = 3;
			private static const _pickOffset:Number = 3;
			
			public static const FIRST_CHILD:String = "firstChild";
			public static const LAST_CHILD:String = "lastChild";
			
			public static const INSTANTIATE_EVENT:String = "instantiateEvent";
		]]>
	</fx:Script>
</mx:Canvas> 
